#!/usr/bin/perl
# (C) 2009 Andrej Stepanchuk
# License: GPLv3
my $version = 1.08;

use Env qw[@PATH];
use Fcntl;
use File::Copy;
use File::Path;
use File::stat;
use Getopt::Long;
use HTML::Entities;
use HTTP::Cookies;
use HTTP::Headers;
use IO::Seekable;
use IO::Socket;
use LWP::ConnCache;
#use LWP::Debug qw(+);
use LWP::UserAgent;
use POSIX qw(mkfifo);
use strict;
#use warnings;
use Time::Local;
use URI;

use XML::Simple;
use Data::Dumper;

my $progurl = shift;
my $quality = shift;

if(not defined($quality) or $progurl eq "" or not ($quality==0 or $quality==1 or $quality==2)) {
	print "Error: please pass a content url and a quality (0,1,2)\n";
	exit 1;
}

my $ua = LWP::UserAgent->new;

my $h = new HTTP::Headers(
                        #'User-Agent'    => $user_agent{coremedia},
                        'Accept'        => '*/*',
                        'Range'         => 'bytes=0-',
                );

my $req = HTTP::Request->new ('GET', $progurl, $h);
my $res = $ua->request($req);
my $content = $res->content;

#print "Content: $content\n\n";

my $cid;
if($content =~ /.*UserHistory.add_watched_history\((\d+)\).*/) {
	$cid = $1;
	print "Found CID: $cid\n";
}

unless(defined($cid)) {
	print "Couldn't get CID!\n";
	exit 1;
}

my $sidurl = "http://r.hulu.com/videos?content_id=$cid";

my $req = HTTP::Request->new ('GET', $sidurl, $h);
my $res = $ua->request($req);
my $content = $res->content;

#print "Content: $content\n\n";

my $xml = new XML::Simple;

# read XML file
my $data = $xml->XMLin($content);
print Dumper($data);
my $pid = $data->{video}->{pid};

unless(defined($pid)) {
	printf "Couldn't get PID!\n";
	exit 1;
}

print "Found PID: $pid\n";

my $xmlfile = "http://releasegeo.hulu.com/content.select?pid=$pid&mbr=true&format=smil";

my $req = HTTP::Request->new ('GET', $xmlfile, $h);
my $res = $ua->request($req);
my $content = $res->content;

my $xml = new XML::Simple;

# read XML file
my $data = $xml->XMLin($content);

# access XML data
#print "$data->{name} is $data->{age} years old and works in the $data->{department} section\n";
print Dumper($data->{body}->{switch});

#--app "ondemand?_fcs_vhost=${server_hostname}&auth=${auth}&aifp=NS20070910&slist=${playpath}"
#--flashVer "WIN 10,0,1.2,36"
#--swfUrl "http://www.hulu.com/player.swf"
#--tcUrl "rtmp://${serverip}:1935/${app}"
#--pageUrl "http://www.hulu.com/watch/2711/family-guy-padre-de-familia"

#--app "ondemand?_fcs_vhost=${server_hostname}&auth=${auth}&aifp=sll02152008&slist=${playpath};.international=false"
#--tcUrl "rtmp://${serverip}:1935/${app}"

my $rtmpurl = $data->{body}->{switch}[1]->{video}[$quality]->{src};

unless(defined($rtmpurl)) {
	print "Couldn't get RTMP url!\n";
	exit 1;
}

print "\nRTMP URL: $rtmpurl\n\n";
if($rtmpurl =~ /^(.*)<break>.*$/) {
	$rtmpurl= $1;
}
# don't strip off the .international=false, it is actually sent!
#if($rtmpurl =~ /^(.*)\;\.international.*$/) {
#        $rtmpurl= $1;
#}

#print "clean RTMP URL: $rtmpurl\n";

my $servername;
my $parameters;
my $playpath;
if($rtmpurl =~ /^rtmp:\/\/(.*)\/.*ondemand.*(auth.*)$/) {
	#print "1: $1\n2: $2\n3: $3";
	$servername = $1;
	$parameters = $2;
}

print "Host: $servername\n";
my $ip = inet_ntoa(inet_aton($servername));
print "IP: $ip\n";

# get playpath if necessary
my $playpath;
if($rtmpurl =~ /^rtmp:\/\/.*ondemand\/(.*)\?.*$/) {
	$playpath = $1;
}
if($playpath) {
	$rtmpurl    = "rtmp://$servername:1935/ondemand?_fcs_vhost=$servername&slist=$playpath";	
} else {
	$rtmpurl    = "rtmp://$servername:1935/ondemand?_fcs_vhost=$servername&$parameters";
	
	# we have to filter out the .international from the RTMP url since otherwise rtmpdump will parse slist="*.international=flse"
	# and the play path must not include that string!
	if($rtmpurl =~ /^(.*)\;\.international.*$/) {
	        $rtmpurl= $1;
	}
}
my $app     = "ondemand?_fcs_vhost=$servername&$parameters";
my $tcurl   = "rtmp://$ip:1935/ondemand?_fcs_vhost=$servername&$parameters";

#print "RTMP: $rtmpurl\n";


my $cmd = "./rtmpdump --rtmp \"$rtmpurl\" --pageUrl \"$progurl\" --flashVer \"WIN 10,0,1.2,36\" --swfUrl \"http://www.hulu.com/player.swf\" --tcUrl \"$tcurl\" --app \"$app\" -o test.flv";
print "\nCOMMAND1: $cmd\n";
system($cmd);
exit 0;

